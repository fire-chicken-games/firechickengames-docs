{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome # The Combat module is now available for purchase on the Unity Asset store. Visit the asset's product page for details. Combat Demos #","title":"Welcome"},{"location":"#welcome","text":"The Combat module is now available for purchase on the Unity Asset store. Visit the asset's product page for details.","title":"Welcome"},{"location":"#combat-demos","text":"","title":"Combat Demos"},{"location":"combat/","text":"The Combat module builds on the Game Creator Shooter module to add enhanced, game-ready, combat features: Proximity-based weapon targeting. Target indicator. Homing projectile. Targeting by visibility. Support for destructible targets. Weapon Stashes (weapon carrying/switching feature). Melee targeting integration (requires Melee module). Dependencies # Combat is an extension for Game Creator and the Shooter module. BOTH are required - Combat will not work without them. They can be purchased from the Unity Asset Store: Game Creator Shooter The Melee module is an optional dependency. Get it here: Melee What\u2019s Included # Full source code. An examples module that contains scenes that demonstrate the features listed above. Module Installation # After purchasing and downloading the Combat module, it must be enabled with the Game Creator Module Manager. Step 1: Open the Module Manager # Step 2: Enable the Combat Module # Step 3 (optional): Install the Combat Examples Module # Melee Module Integration # New in 0.5.0 The Combat module provides a lightweight integration to allow seamless Shooter/Melee targeting and weapon switching if the Melee module is present. To enable the integration, simply enable the Melee Combat module included with the Combat module. Note that there is also a Melee Combat Examples module that demonstrates Shooter/Melee targeting and weapon switching.","title":"Getting Started"},{"location":"combat/#dependencies","text":"Combat is an extension for Game Creator and the Shooter module. BOTH are required - Combat will not work without them. They can be purchased from the Unity Asset Store: Game Creator Shooter The Melee module is an optional dependency. Get it here: Melee","title":"Dependencies"},{"location":"combat/#whats-included","text":"Full source code. An examples module that contains scenes that demonstrate the features listed above.","title":"What\u2019s Included"},{"location":"combat/#module-installation","text":"After purchasing and downloading the Combat module, it must be enabled with the Game Creator Module Manager.","title":"Module Installation"},{"location":"combat/#step-1-open-the-module-manager","text":"","title":"Step 1: Open the Module Manager"},{"location":"combat/#step-2-enable-the-combat-module","text":"","title":"Step 2: Enable the Combat Module"},{"location":"combat/#step-3-optional-install-the-combat-examples-module","text":"","title":"Step 3 (optional): Install the Combat Examples Module"},{"location":"combat/#melee-module-integration","text":"New in 0.5.0 The Combat module provides a lightweight integration to allow seamless Shooter/Melee targeting and weapon switching if the Melee module is present. To enable the integration, simply enable the Melee Combat module included with the Combat module. Note that there is also a Melee Combat Examples module that demonstrates Shooter/Melee targeting and weapon switching.","title":"Melee Module Integration"},{"location":"combat/homing_projectiles/","text":"As the name suggests, a Homing Projectile seeks its target even if the weapon firing the projectile is not pointed directly at the intended target. Setup is trivial. Simply attach the Combat module\u2019s Homing Projectile component to any projectile. The component\u2019s Ammo Rigidbody property will be automatically set if the game object contains a Rigidbody component. The Propulsion settings control the movement behavior of the projectile: Seconds To Wait Before Propelling : Delays the propulsion of the projectile by a number of seconds. A value of 0 (or less) results in no delay. Maximum Turn Angle : The maximum angle, in degrees, that the projectile will turn while homing in on its target. Velocity : How fast the projectile moves toward its target - this should likely match or exceed the max velocity of the projectile ammo if propulsion is delayed. If there is no delay, this setting will effectively override the projectile ammo\u2019s min/max velocity. Rigidybody Gravity Turning off gravity on the Rigidbody is optional, but might be desired depending on the specific projectile.","title":"Homing Projectiles"},{"location":"combat/roadmap/","text":"v0.7.0 # Targeting Features New public API for Targeter component: -- HasTarget -- GetCurrentTarget -- IsCurrentTarget -- SetCurrentTarget -- SetTargetingEnabled -- ToggleTargetingEnabled -- CycleToNextTarget New actions to enable, disable, and toggle targeting. New action to switch to next target. New \"On Target Changed\" trigger. Accessibility Module (by Pivec Labs) mobile touchstick compatibility. Mouse targeting w/ optional hover indicator (i.e. Targetable can be selected with mouse). Targeter's built-in user input controls can now be disabled. Targeter can now be configured to not auto-acquire first/next target. Spawning Features Spawn by Weight (i.e. random spawn chance). Bug Fixes Targetable's internal event now correctly cleaned up. When created from GameObject menu, a Spawner's collider now is set as a trigger by default. v0.6.0 # Spawner component. v0.5.0 # Melee targeting integration. Weapon Stashes (weapon carrying/switching feature). v0.4.1 # Removed .blend files that caused an issue when Blender was not installed. v0.4.0 # Targeting by visibility. Support for destructible targets. v0.3.0 # Proximity-based weapon targeting. Target indicator. Homing projectile. Possible Future Features # Aim-assist. Headshots/body part targeting. Simplified death action for targetable characters. In editor weapon positioning. Proximity mines. Dual-wielding. When a target is defeated, switch to its nearest neighboring target (instead of closest to the player). Left/right target cycling (instead of nearest/farthest from player). AI targeting.","title":"Roadmap"},{"location":"combat/roadmap/#v070","text":"Targeting Features New public API for Targeter component: -- HasTarget -- GetCurrentTarget -- IsCurrentTarget -- SetCurrentTarget -- SetTargetingEnabled -- ToggleTargetingEnabled -- CycleToNextTarget New actions to enable, disable, and toggle targeting. New action to switch to next target. New \"On Target Changed\" trigger. Accessibility Module (by Pivec Labs) mobile touchstick compatibility. Mouse targeting w/ optional hover indicator (i.e. Targetable can be selected with mouse). Targeter's built-in user input controls can now be disabled. Targeter can now be configured to not auto-acquire first/next target. Spawning Features Spawn by Weight (i.e. random spawn chance). Bug Fixes Targetable's internal event now correctly cleaned up. When created from GameObject menu, a Spawner's collider now is set as a trigger by default.","title":"v0.7.0"},{"location":"combat/roadmap/#v060","text":"Spawner component.","title":"v0.6.0"},{"location":"combat/roadmap/#v050","text":"Melee targeting integration. Weapon Stashes (weapon carrying/switching feature).","title":"v0.5.0"},{"location":"combat/roadmap/#v041","text":"Removed .blend files that caused an issue when Blender was not installed.","title":"v0.4.1"},{"location":"combat/roadmap/#v040","text":"Targeting by visibility. Support for destructible targets.","title":"v0.4.0"},{"location":"combat/roadmap/#v030","text":"Proximity-based weapon targeting. Target indicator. Homing projectile.","title":"v0.3.0"},{"location":"combat/roadmap/#possible-future-features","text":"Aim-assist. Headshots/body part targeting. Simplified death action for targetable characters. In editor weapon positioning. Proximity mines. Dual-wielding. When a target is defeated, switch to its nearest neighboring target (instead of closest to the player). Left/right target cycling (instead of nearest/farthest from player). AI targeting.","title":"Possible Future Features"},{"location":"combat/weapon_stashes/","text":"New in 0.5.0 Weapon Stashes is a lightweight inventory system to assign weapons to a Player Character and allow the player to switch between them. It is compatible with both Shooter and Melee module weapons. Currently, only a weapon's default ammo is supported. Weapon Stash Component # A Weapon Stash must be added to a game object (usually the player): Adding a Weapon # There are two actions for adding weapons: Give Shooter Weapon and Give Melee Weapon. When configuring these actions, be sure to select the Target Game Object (usually the player) with a Weapon Stash . Changing Weapons # The current weapon can be switched to the next (or previous) weapon in the stash with the Cycle to Next Weapon action. Weapon Stash UI Component # The Weapon Stash UI component allows a stash's current weapon and ammo (if any) to be displayed on screen. This component differs the Shooter module's AmmoUI component in that it contains weapon information, not just ammo. Also, it will display the name of Melee module weapons (not just Shooter weapons). The Combat Examples module includes a WeaponStashUI prefab that demonstrates how to use the component:","title":"Weapon Stashes"},{"location":"combat/weapon_stashes/#weapon-stash-component","text":"A Weapon Stash must be added to a game object (usually the player):","title":"Weapon Stash Component"},{"location":"combat/weapon_stashes/#adding-a-weapon","text":"There are two actions for adding weapons: Give Shooter Weapon and Give Melee Weapon. When configuring these actions, be sure to select the Target Game Object (usually the player) with a Weapon Stash .","title":"Adding a Weapon"},{"location":"combat/weapon_stashes/#changing-weapons","text":"The current weapon can be switched to the next (or previous) weapon in the stash with the Cycle to Next Weapon action.","title":"Changing Weapons"},{"location":"combat/weapon_stashes/#weapon-stash-ui-component","text":"The Weapon Stash UI component allows a stash's current weapon and ammo (if any) to be displayed on screen. This component differs the Shooter module's AmmoUI component in that it contains weapon information, not just ammo. Also, it will display the name of Melee module weapons (not just Shooter weapons). The Combat Examples module includes a WeaponStashUI prefab that demonstrates how to use the component:","title":"Weapon Stash UI Component"},{"location":"combat/targeting/overview/","text":"The Combat module provides a proximity-based targeting system. It allows a player to target characters (or other game objects) within a configurable range. This is achieved with two components: Targeter and Targetable . When a player with a Targeter component approaches objects with the Targetable component attached, the player can press the Q key to lock onto the nearest available object. The Z and C keys are used to switch targets. Please note that these keys can be remapped .","title":"Overview"},{"location":"combat/targeting/targetable/","text":"Making game objects targetable using the Combat module\u2019s Targetable component is trivial for Game Creator Characters and other game objects. Basic Setup # Characters # To make a character targetable, simply add the Targetable component to it. Non-Character Game Objects # Any game object can be targetable if it has the Targetable , Rigidbody , and Collider components. Making a Target Untargetable # The Targetable component contains a boolean Game Creator Variable property, called Can Be Targeted , that can make the target untargetable. For example, once the target has been defeated, it is likely desirable for the player to automatically stop targeting it and not be able to target it again. This is accomplished by: Adding a boolean Local Variable to a character (e.g. \"IsAlive\"). Assigning the boolean variable to the Can Be Targeted property. In the character\u2019s On Receive Shot Actions , set the boolean value to false - this will deselect the target and make it no longer targetable. The Combat Examples module\u2019s Example4-KillableCharacters demo scene contains a pre-configured KillableCharacter prefab. It demonstrates how to make a character killable/untargetable using the method described above. Visibility Detection Renderer This property is used to determine if a Targetable's mesh is visible to a Targeter component. It does not normally need to be manually set (if not set, the component uses the first renderer found in the object's hierarchy). This property only needs to be manually set if the Targetable component's parent object does not have a mesh renderer in its hierarchy, or a mesh renderer other than the first one the GetComponentInChildren<Renderer>() returns by default is required. If visibility features are not used, this property can be ignored completely. \"On Target Become Untargetable\" Trigger # New in 0.4.0 There is also a trigger called \"On Target Become Untargetable\" that allows for actions to be executed when the target becomes untargetable. The Combat Examples module\u2019s Example7-DestructibleTargets demo scene contains a pre-configured DestructibleTarget prefab. It showcases how to use this trigger to implement destructible targets. Advanced Options # Active Target Indicator # The Targetable component provides an \"indicator\" feature that highlights the currently targeted game object. The content and appearance of the indicator is configurable. Text # An indicator can have custom text, defined via a Game Creator Global/Local Variable . Practically speaking, it almost always makes sense to use a Local Variable packaged in the same prefab object that contains the Targetable component. The value of the Local Variable would then be configured on the instance of the prefab when used in a scene. Prefab # If not set, the Game Creator Floating Message prefab is automatically set as the target indicator prefab at runtime. The Combat Examples module includes an example of a custom indicator. The example indicator has text above a downward pointing arrow. Positioning # The target indicator is positioned relative to the parent game object. By default, the Indicator Offset vector will position the indicator above the Game Creator example character, but may need to be adjusted for other characters and objects of with heights. Targeting Actions # A Targetable game object can optionally execute actions when it becomes the active target, and another set of actions when some other object becomes the active target (or targeting is toggled off altogether). \"On Become Active Target\" # When the target becomes the active target, these actions can (for example) make the target crouch. A more practical example might be adding an outline around the target or perhaps set a variable that triggers some behavior (e.g. make the target hostile or flee). \"On Not Active Target\" # Related to the previous section, when the target is changed or targeting is disabled, this action will reset the target character\u2019s gesture state.","title":"Targetable Component"},{"location":"combat/targeting/targetable/#basic-setup","text":"","title":"Basic Setup"},{"location":"combat/targeting/targetable/#characters","text":"To make a character targetable, simply add the Targetable component to it.","title":"Characters"},{"location":"combat/targeting/targetable/#non-character-game-objects","text":"Any game object can be targetable if it has the Targetable , Rigidbody , and Collider components.","title":"Non-Character Game Objects"},{"location":"combat/targeting/targetable/#making-a-target-untargetable","text":"The Targetable component contains a boolean Game Creator Variable property, called Can Be Targeted , that can make the target untargetable. For example, once the target has been defeated, it is likely desirable for the player to automatically stop targeting it and not be able to target it again. This is accomplished by: Adding a boolean Local Variable to a character (e.g. \"IsAlive\"). Assigning the boolean variable to the Can Be Targeted property. In the character\u2019s On Receive Shot Actions , set the boolean value to false - this will deselect the target and make it no longer targetable. The Combat Examples module\u2019s Example4-KillableCharacters demo scene contains a pre-configured KillableCharacter prefab. It demonstrates how to make a character killable/untargetable using the method described above. Visibility Detection Renderer This property is used to determine if a Targetable's mesh is visible to a Targeter component. It does not normally need to be manually set (if not set, the component uses the first renderer found in the object's hierarchy). This property only needs to be manually set if the Targetable component's parent object does not have a mesh renderer in its hierarchy, or a mesh renderer other than the first one the GetComponentInChildren<Renderer>() returns by default is required. If visibility features are not used, this property can be ignored completely.","title":"Making a Target Untargetable"},{"location":"combat/targeting/targetable/#on-target-become-untargetable-trigger","text":"New in 0.4.0 There is also a trigger called \"On Target Become Untargetable\" that allows for actions to be executed when the target becomes untargetable. The Combat Examples module\u2019s Example7-DestructibleTargets demo scene contains a pre-configured DestructibleTarget prefab. It showcases how to use this trigger to implement destructible targets.","title":"\"On Target Become Untargetable\" Trigger"},{"location":"combat/targeting/targetable/#advanced-options","text":"","title":"Advanced Options"},{"location":"combat/targeting/targetable/#active-target-indicator","text":"The Targetable component provides an \"indicator\" feature that highlights the currently targeted game object. The content and appearance of the indicator is configurable.","title":"Active Target Indicator"},{"location":"combat/targeting/targetable/#text","text":"An indicator can have custom text, defined via a Game Creator Global/Local Variable . Practically speaking, it almost always makes sense to use a Local Variable packaged in the same prefab object that contains the Targetable component. The value of the Local Variable would then be configured on the instance of the prefab when used in a scene.","title":"Text"},{"location":"combat/targeting/targetable/#prefab","text":"If not set, the Game Creator Floating Message prefab is automatically set as the target indicator prefab at runtime. The Combat Examples module includes an example of a custom indicator. The example indicator has text above a downward pointing arrow.","title":"Prefab"},{"location":"combat/targeting/targetable/#positioning","text":"The target indicator is positioned relative to the parent game object. By default, the Indicator Offset vector will position the indicator above the Game Creator example character, but may need to be adjusted for other characters and objects of with heights.","title":"Positioning"},{"location":"combat/targeting/targetable/#targeting-actions","text":"A Targetable game object can optionally execute actions when it becomes the active target, and another set of actions when some other object becomes the active target (or targeting is toggled off altogether).","title":"Targeting Actions"},{"location":"combat/targeting/targetable/#on-become-active-target","text":"When the target becomes the active target, these actions can (for example) make the target crouch. A more practical example might be adding an outline around the target or perhaps set a variable that triggers some behavior (e.g. make the target hostile or flee).","title":"\"On Become Active Target\""},{"location":"combat/targeting/targetable/#on-not-active-target","text":"Related to the previous section, when the target is changed or targeting is disabled, this action will reset the target character\u2019s gesture state.","title":"\"On Not Active Target\""},{"location":"combat/targeting/targeter/","text":"Included in the Combat Examples module is a prefab called PlayerTargeter that demonstrates how to use the Targeter component. The Sphere Collider attached to the same game object (as depicted in the inspector screenshot below) is required. Note that the range of the Targeter is dictated by the Radius property of this collider. The PlayerTargeter prefab should be nested under the Game Creator Player object. Auto Aim At Target # Automatically aiming at a target can be disabled with the Auto Aim At Target option - the character will still be locked on to it, but will not fix their weapon on it while aiming. This may be desirable for some games. Target Visibility # New in 0.4.0 The component's target visibility options allow for target selection to be limited by what the camera can see. Only Target Visible To Camera # If enabled, only targets possibly visible to the camera (i.e. in its view frustum) are targetable. Only Target Non-Occluded # If enabled, targets hidden behind objects are not targetable. Note that this option is turned off by default because the player and targetables need to be on dedicated layers which requires manual configuration. Layers To Ignore For Visibility Occlusion # The layers to ignore when determining target visibility when Only Target Non-Occluded is enabled. Typically, there should be two layers: A \"Targetable\" layer that contains all targetable objects. A \"Player\" layer that contains the player. User Input # The User Input section of the Targeter component allows the keys that control target locking and switching to be customized.","title":"Targeter Component"},{"location":"combat/targeting/targeter/#auto-aim-at-target","text":"Automatically aiming at a target can be disabled with the Auto Aim At Target option - the character will still be locked on to it, but will not fix their weapon on it while aiming. This may be desirable for some games.","title":"Auto Aim At Target"},{"location":"combat/targeting/targeter/#target-visibility","text":"New in 0.4.0 The component's target visibility options allow for target selection to be limited by what the camera can see.","title":"Target Visibility"},{"location":"combat/targeting/targeter/#only-target-visible-to-camera","text":"If enabled, only targets possibly visible to the camera (i.e. in its view frustum) are targetable.","title":"Only Target Visible To Camera"},{"location":"combat/targeting/targeter/#only-target-non-occluded","text":"If enabled, targets hidden behind objects are not targetable. Note that this option is turned off by default because the player and targetables need to be on dedicated layers which requires manual configuration.","title":"Only Target Non-Occluded"},{"location":"combat/targeting/targeter/#layers-to-ignore-for-visibility-occlusion","text":"The layers to ignore when determining target visibility when Only Target Non-Occluded is enabled. Typically, there should be two layers: A \"Targetable\" layer that contains all targetable objects. A \"Player\" layer that contains the player.","title":"Layers To Ignore For Visibility Occlusion"},{"location":"combat/targeting/targeter/#user-input","text":"The User Input section of the Targeter component allows the keys that control target locking and switching to be customized.","title":"User Input"}]}